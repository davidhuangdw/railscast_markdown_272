### markdown: redcarpet

        # highlight code using CodeRay
        gem 'coderay'
        # render:
        class HighlightCode <  Redcarpet::Render::HTML
          def block_code(code, language)                    # use 'block_code' hook
            # CodeRay.scan(code, language).div(line_numbers: :table)
            CodeRay.scan(code, language).div
          end
        end

          def markdown
            @@markdown ||= Redcarpet::Markdown.
                new(HightlightCode.                             # change renderer to HightlightCode
                new(prettify:true, hard_wrap:true),fenced_code_blocks:true)
          end
        # markdown content
        ``` ruby
        ....
        ```

        # render
          def markdown
            @@markdown ||= Redcarpet::Markdown.
                new(Redcarpet::Render::HTML.
                new(prettify:true, hard_wrap:true),fenced_code_blocks:true)
          end
          def bio
            h.sanitize markdown.render(object.bio) if object.bio.present?       # remember to check presence!!
          end

        gem 'redcarpet'
